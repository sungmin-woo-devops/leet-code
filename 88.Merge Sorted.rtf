{\rtf1\ansi\ansicpg949\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww30040\viewh17760\viewkind0
\deftab720
\pard\pardeftab720\qj\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 \expnd0\expndtw0\kerning0
88. Merge Sorted Array
\f1 \

\f0 \'a0
\f1 \

\f0 You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
\f1 \

\f0 \'a0
\f1 \

\f0 Merge nums1 and nums2 into a single array sorted in non-decreasing order.
\f1 \

\f0 \'a0
\f1 \

\f0 The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.
\f1 \

\f0 \'a0
\f1 \

\f0 \'a0
\f1 \

\f0 \'a0
\f1 \

\f0 Example 1:
\f1 \

\f0 \'a0
\f1 \

\f0 Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
\f1 \

\f0 Output: [1,2,2,3,5,6]
\f1 \

\f0 Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
\f1 \

\f0 The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
\f1 \

\f0 Example 2:
\f1 \

\f0 \'a0
\f1 \

\f0 Input: nums1 = [1], m = 1, nums2 = [], n = 0
\f1 \

\f0 Output: [1]
\f1 \

\f0 Explanation: The arrays we are merging are [1] and [].
\f1 \

\f0 The result of the merge is [1].
\f1 \

\f0 Example 3:
\f1 \

\f0 \'a0
\f1 \

\f0 Input: nums1 = [0], m = 0, nums2 = [1], n = 1
\f1 \

\f0 Output: [1]
\f1 \

\f0 Explanation: The arrays we are merging are [] and [1].
\f1 \

\f0 The result of the merge is [1].
\f1 \

\f0 Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.
\f1 \

\f0 \'a0
\f1 \

\f0 \'a0
\f1 \

\f0 Constraints:
\f1 \

\f0 \'a0
\f1 \

\f0 nums1.length == m + n
\f1 \

\f0 nums2.length == n
\f1 \

\f0 0 <= m, n <= 200
\f1 \

\f0 1 <= m + n <= 200
\f1 \

\f0 -109 <= nums1[i], nums2[j] <= 109
\f1 \

\f0 \'a0
\f1 \

\f0 \'a0
\f1 \

\f0 Follow up: Can you come up with an algorithm that runs in O(m + n) time?
\f1 \
\
\
\
\
\
Code(Java):\
\
\pard\pardeftab720\qj\partightenfactor0

\f0 \cf2 lass Solution \{\
\'a0\'a0\'a0 public void merge(int[] nums1, int m, int[] nums2, int n) \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 int i = m - 1; \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 int j = n - 1; \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 int k = m + n - 1; \
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 while (i >= 0 && j >= 0) \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if (nums1[i] > nums2[j]) \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 nums1[k] = nums1[i];\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 i--;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \} else \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 nums1[k] = nums2[j];\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 j--;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 k--;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 while (j >= 0) \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 nums1[k] = nums2[j];\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 j--;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 k--;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\'a0\'a0 \}\
\}\
}